// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	inviteLogFieldNames          = builder.RawFieldNames(&InviteLog{})
	inviteLogRows                = strings.Join(inviteLogFieldNames, ",")
	inviteLogRowsExpectAutoSet   = strings.Join(stringx.Remove(inviteLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	inviteLogRowsWithPlaceHolder = strings.Join(stringx.Remove(inviteLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	inviteLogModel interface {
		Insert(ctx context.Context, data *InviteLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*InviteLog, error)
		Update(ctx context.Context, data *InviteLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultInviteLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	InviteLog struct {
		Id       int64  `db:"id"`
		Username string `db:"username"` // 用户名称,邮箱/钱包地址
		Credit   int64  `db:"credit"`   // 社区邀请好友收益
	}
)

func newInviteLogModel(conn sqlx.SqlConn) *defaultInviteLogModel {
	return &defaultInviteLogModel{
		conn:  conn,
		table: "`invite_log`",
	}
}

func (m *defaultInviteLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultInviteLogModel) FindOne(ctx context.Context, id int64) (*InviteLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", inviteLogRows, m.table)
	var resp InviteLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInviteLogModel) Insert(ctx context.Context, data *InviteLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, inviteLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Username, data.Credit)
	return ret, err
}

func (m *defaultInviteLogModel) Update(ctx context.Context, data *InviteLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, inviteLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Username, data.Credit, data.Id)
	return err
}

func (m *defaultInviteLogModel) tableName() string {
	return m.table
}

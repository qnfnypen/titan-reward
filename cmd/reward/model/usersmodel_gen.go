// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	usersFieldNames          = builder.RawFieldNames(&Users{})
	usersRows                = strings.Join(usersFieldNames, ",")
	usersRowsExpectAutoSet   = strings.Join(stringx.Remove(usersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	usersRowsWithPlaceHolder = strings.Join(stringx.Remove(usersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	usersModel interface {
		Insert(ctx context.Context, data *Users) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Users, error)
		FindOneByUsername(ctx context.Context, username string) (*Users, error)
		Update(ctx context.Context, data *Users) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUsersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Users struct {
		Id                     int64   `db:"id"`
		Username               string  `db:"username"`                 // 用户名称,邮箱/钱包地址
		Role                   int64   `db:"role"`                     // 2的时候为KOL
		ClosedTestReward       float64 `db:"closed_test_reward"`       // 封测奖励
		HuygensReward          float64 `db:"huygens_reward"`           // 惠更斯测试网节点收益
		HuygensReferralReward  float64 `db:"huygens_referral_reward"`  // 惠更斯测试网邀请好友收益
		HerschelReward         float64 `db:"herschel_reward"`          // 郝歇尔测试网邀请好友收益
		HerschelReferralReward float64 `db:"herschel_referral_reward"` // 郝歇尔测试网邀请好友收益
		Reward                 float64 `db:"reward"`                   // 当前网络邀请好友收益
		ReferralReward         float64 `db:"referral_reward"`          // 当前网络邀请好友收益
		FromKolBonusReward     float64 `db:"from_kol_bonus_reward"`    // 受KOL邀请用户的额外奖励
	}
)

func newUsersModel(conn sqlx.SqlConn) *defaultUsersModel {
	return &defaultUsersModel{
		conn:  conn,
		table: "`users`",
	}
}

func (m *defaultUsersModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUsersModel) FindOne(ctx context.Context, id int64) (*Users, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", usersRows, m.table)
	var resp Users
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByUsername(ctx context.Context, username string) (*Users, error) {
	var resp Users
	query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", usersRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) Insert(ctx context.Context, data *Users) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, usersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Username, data.Role, data.ClosedTestReward, data.HuygensReward, data.HuygensReferralReward, data.HerschelReward, data.HerschelReferralReward, data.Reward, data.ReferralReward, data.FromKolBonusReward)
	return ret, err
}

func (m *defaultUsersModel) Update(ctx context.Context, newData *Users) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, usersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Username, newData.Role, newData.ClosedTestReward, newData.HuygensReward, newData.HuygensReferralReward, newData.HerschelReward, newData.HerschelReferralReward, newData.Reward, newData.ReferralReward, newData.FromKolBonusReward, newData.Id)
	return err
}

func (m *defaultUsersModel) tableName() string {
	return m.table
}
